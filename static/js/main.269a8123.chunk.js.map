{"version":3,"sources":["components/auth/firebaseInit.jsx","components/loginPage/loginPage.jsx","components/dataItem/dataItem.jsx","components/addNewItem/addNewItem.jsx","components/content/content.jsx","components/header/header.jsx","components/dashboard/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["firebaseInit","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","LoginPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uiConfig","react_default","a","createElement","className","src","alt","StyledFirebaseAuth_default","firebaseAuth","auth","Component","DataItem","handleClick","setState","displayColorPicker","handleChange","color","bgcolor","hex","updateBackgroundColor","heading","type","componentDidUpdate","ReactDOM","findDOMNode","refs","collapsibleElement","getElementsByClassName","style","componentDidMount","toggleColorPicker","position","zIndex","top","right","bottom","left","lib","onChange","colors","getCreationDate","dist_default","fromNow","creationDate","description","_this2","draggable","onDragStart","event","onDragStartComponent","Collapsible_default","ref","trigger","transitionTime","index_esm","onClick","removeCurrentItem","AddNewItem","addNewItemToList","model","addToDoItem","JSON","parse","stringify","Date","setInputState","error","main","onSubmit","name","label","value","Content","renderDataItems","dataArray","elements","forEach","element","push","renderDataItem","data","dataTransfer","setData","onDragOver","preventDefault","onDragDrop","newCategory","itemData","getData","changeItemCategoryAfterItemDragged","item","dataItem_DataItem","key","renderSkeletonItem","numberOfItems","bundle","highlightColor","bundle_default","count","height","e","onDrop","getToDOItems","length","getInputState","addNewItem_AddNewItem","checkIsDataAvailable","getInProgressItems","getDoneItems","Header","logout","signOut","fa_index_esm","Dashboard","checkIfInitialState","todo","inProgress","done","componentWillMount","onAuthStateChanged","user","userDetails","displayName","email","uid","getUserData","writeUserData","database","set","console","log","on","snapshot","val","isDataAvailable","isInputOpen","defineProperty","concat","updatedArray","map","newtype","dataItems","filter","prevState","header_Header","content_Content","App","signInFlow","signInOptions","firebase","GoogleAuthProvider","PROVIDER_ID","GithubAuthProvider","callbacks","signInSuccessWithAuthResult","isPageLoaded","validateUserAndServePage","dashboard_Dashboard","react_loading_default","width","loginPage_LoginPage","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.269a8123.chunk.js","sourcesContent":["import Firebase from 'firebase';\r\n\r\nconst firebaseInit = Firebase.initializeApp({\r\n  apiKey: 'AIzaSyAPah9fgXnPwpBirt2WUER-qO7XevS19X4',\r\n  authDomain: 'scrum-board-39e8f.firebaseapp.com',\r\n  databaseURL: 'https://scrum-board-39e8f.firebaseio.com',\r\n  projectId: 'scrum-board-39e8f',\r\n  storageBucket: 'scrum-board-39e8f.appspot.com',\r\n  messagingSenderId: '909585498611'\r\n});\r\n\r\nexport default firebaseInit;\r\n","import React, { Component } from 'react';\r\nimport './loginPage.css';\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebaseInit from '../auth/firebaseInit';\r\n\r\nexport default class LoginPage extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { uiConfig: props.uiConfig };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login-page\">\r\n        <div className=\"login-form\">\r\n          <img src=\"/images/logo.png\" alt=\"Kanbang\" className=\"login-logo\" />\r\n          <h2 className=\"login-form-title\">ACCOUNT LOGIN</h2>\r\n          <div className=\"form-block\">\r\n            <StyledFirebaseAuth\r\n              uiConfig={this.state.uiConfig}\r\n              firebaseAuth={firebaseInit.auth()}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Collapsible from 'react-collapsible';\r\nimport './dataItem.css';\r\nimport { GithubPicker } from 'react-color';\r\nimport { IoMdHeart } from 'react-icons/io';\r\nimport Moment from 'react-moment';\r\n\r\nexport default class DataItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      heading: props.heading || '',\r\n      description: props.description || '',\r\n      type: props.type || 'none',\r\n      bgcolor: props.bgcolor || '#3498db',\r\n      displayColorPicker: false,\r\n      creationDate: props.creationDate || '1976-04-19T12:59-0500'\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n  };\r\n\r\n  handleChange = color => {\r\n    this.setState({ bgcolor: color.hex, displayColorPicker: false });\r\n    this.props.updateBackgroundColor(\r\n      this.state.heading,\r\n      this.state.type,\r\n      color.hex\r\n    );\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    ReactDOM.findDOMNode(this.refs.collapsibleElement).getElementsByClassName(\r\n      'Collapsible__trigger'\r\n    )[0].style = 'background : ' + this.state.bgcolor;\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    ReactDOM.findDOMNode(this.refs.collapsibleElement).getElementsByClassName(\r\n      'Collapsible__trigger'\r\n    )[0].style = 'background : ' + this.state.bgcolor;\r\n  };\r\n\r\n  toggleColorPicker = () => {\r\n    const popover = {\r\n      position: 'absolute',\r\n      zIndex: '2'\r\n    };\r\n    const cover = {\r\n      position: 'fixed',\r\n      top: '10px',\r\n      right: '0px',\r\n      bottom: '0px',\r\n      left: '0px'\r\n    };\r\n\r\n    return this.state.displayColorPicker ? (\r\n      <div style={popover}>\r\n        <div style={cover} />\r\n        <GithubPicker\r\n          onChange={this.handleChange}\r\n          colors={[\r\n            '#1abc9c',\r\n            '#3498db',\r\n            '#9b59b6',\r\n            '#34495e',\r\n            '#e67e22',\r\n            '#e74c3c',\r\n            '#95a5a6',\r\n            '#2ecc71',\r\n            '#f39c12',\r\n            '#8e44ad',\r\n            '#131418',\r\n            '#007ee5',\r\n            '#b92b27',\r\n            '#cd201f',\r\n            '#FBC02D',\r\n            '#6D4C41'\r\n          ]}\r\n        />\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  getCreationDate = () => {\r\n    return <Moment fromNow>{this.state.creationDate}</Moment>;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        draggable\r\n        onDragStart={event =>\r\n          this.props.onDragStartComponent(event, this.state)\r\n        }>\r\n        <Collapsible\r\n          ref=\"collapsibleElement\"\r\n          trigger={this.state.heading}\r\n          transitionTime={200}\r\n          className=\"single-item\">\r\n          <p>{this.state.description}</p>\r\n          <div className=\"item-actions\">\r\n            <div className=\"color-picker\">\r\n              <IoMdHeart\r\n                style={{ color: this.state.bgcolor }}\r\n                onClick={this.handleClick}\r\n              />\r\n              {this.toggleColorPicker()}\r\n            </div>\r\n            <div className=\"info-item\">\r\n              <span\r\n                className=\"remove-item\"\r\n                onClick={() =>\r\n                  this.props.removeCurrentItem(\r\n                    this.state.heading,\r\n                    this.state.description,\r\n                    this.state.type\r\n                  )\r\n                }>\r\n                REMOVE\r\n              </span>\r\n              <span className=\"date-item\" style={{ color: this.state.bgcolor }}>\r\n                {this.getCreationDate()}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Collapsible>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Form,\r\n  TextField,\r\n  SubmitField,\r\n  TextareaField\r\n} from 'react-components-form';\r\nimport './addNewItem.css';\r\n\r\nexport default class AddNewItem extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: ''\r\n    };\r\n  }\r\n\r\n  addNewItemToList = model => {\r\n    if (model.heading && model.description) {\r\n      this.props.addToDoItem({\r\n        heading: model.heading,\r\n        description: model.description,\r\n        type: 'todo',\r\n        bgcolor: '#3498db',\r\n        creationDate: JSON.parse(JSON.stringify(new Date()))\r\n      });\r\n      this.props.setInputState();\r\n    } else {\r\n      this.setState({\r\n        error: 'Please fill all the fields !'\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-new-item\">\r\n        <h4 className=\"form-title\">ADD NEW TASK</h4>\r\n        <Form onSubmit={this.addNewItemToList} className=\"new-item-form\">\r\n          <TextField\r\n            name=\"heading\"\r\n            label=\"Title :\"\r\n            type=\"text\"\r\n            className=\"item-textfield\"\r\n          />\r\n          <TextareaField\r\n            name=\"description\"\r\n            label=\"Description :\"\r\n            type=\"text\"\r\n            className=\"item-textfield\"\r\n          />\r\n          <SubmitField value=\"Submit\" />\r\n          <span className=\"form-error\">{this.state.error}</span>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './content.css';\r\nimport DataItem from '../dataItem/dataItem';\r\nimport AddNewItem from '../addNewItem/addNewItem';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\n\r\nexport default class Content extends Component {\r\n  renderDataItems = dataArray => {\r\n    let elements = [];\r\n    dataArray.forEach(element => {\r\n      elements.push(this.renderDataItem(element));\r\n    });\r\n    return elements;\r\n  };\r\n\r\n  onDragStartComponent = (event, data) => {\r\n    event.dataTransfer.setData('heading', data.heading);\r\n    event.dataTransfer.setData('description', data.description);\r\n    event.dataTransfer.setData('type', data.type);\r\n    event.dataTransfer.setData('bgcolor', data.bgcolor);\r\n    event.dataTransfer.setData('creationDate', data.creationDate);\r\n  };\r\n\r\n  onDragOver = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  onDragDrop = (event, newCategory) => {\r\n    const itemData = {\r\n      heading: event.dataTransfer.getData('heading'),\r\n      description: event.dataTransfer.getData('description'),\r\n      type: event.dataTransfer.getData('type'),\r\n      bgcolor: event.dataTransfer.getData('bgcolor'),\r\n      creationDate: event.dataTransfer.getData('creationDate')\r\n    };\r\n    if (itemData.type !== newCategory) {\r\n      this.props.changeItemCategoryAfterItemDragged(itemData, newCategory);\r\n    }\r\n  };\r\n\r\n  renderDataItem = item => {\r\n    return (\r\n      <DataItem\r\n        heading={item.heading}\r\n        description={item.description}\r\n        type={item.type}\r\n        key={item.heading}\r\n        bgcolor={item.bgcolor}\r\n        creationDate={item.creationDate}\r\n        removeCurrentItem={this.props.removeCurrentItem}\r\n        onDragStartComponent={this.onDragStartComponent}\r\n        updateBackgroundColor={this.props.updateBackgroundColor}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderSkeletonItem = numberOfItems => {\r\n    return (\r\n      <SkeletonTheme color=\"#E0F2F1\" highlightColor=\"#FAFAFA\">\r\n        <p>\r\n          <Skeleton count={numberOfItems} height={40} />\r\n        </p>\r\n      </SkeletonTheme>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <div\r\n          className=\"todo\"\r\n          onDragOver={e => this.onDragOver(e)}\r\n          onDrop={e => {\r\n            this.onDragDrop(e, 'todo');\r\n          }}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th className=\"action-header\">\r\n                  TODO / {this.props.getToDOItems().length}\r\n                </th>\r\n              </tr>\r\n              <tr className=\"draggable\">\r\n                {this.props.getInputState() && (\r\n                  <AddNewItem\r\n                    setInputState={this.props.setInputState}\r\n                    addToDoItem={this.props.addToDoItem}\r\n                  />\r\n                )}\r\n                {!this.props.checkIsDataAvailable()\r\n                  ? this.renderSkeletonItem(8)\r\n                  : this.renderDataItems(this.props.getToDOItems())}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div\r\n          className=\"in-progress\"\r\n          onDragOver={e => this.onDragOver(e)}\r\n          onDrop={e => {\r\n            this.onDragDrop(e, 'inProgress');\r\n          }}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th className=\"action-header\">\r\n                  IN PROGRESS / {this.props.getInProgressItems().length}\r\n                </th>\r\n              </tr>\r\n              <tr className=\"draggable\">\r\n                {!this.props.checkIsDataAvailable()\r\n                  ? this.renderSkeletonItem(10)\r\n                  : this.renderDataItems(this.props.getInProgressItems())}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div\r\n          className=\"done\"\r\n          onDragOver={e => this.onDragOver(e)}\r\n          onDrop={e => {\r\n            this.onDragDrop(e, 'done');\r\n          }}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th className=\"action-header\">\r\n                  DONE / {this.props.getDoneItems().length}\r\n                </th>\r\n              </tr>\r\n              <tr className=\"draggable\">\r\n                {!this.props.checkIsDataAvailable()\r\n                  ? this.renderSkeletonItem(5)\r\n                  : this.renderDataItems(this.props.getDoneItems())}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './header.css';\r\nimport firebaseInit from '../auth/firebaseInit';\r\nimport { FaPowerOff } from 'react-icons/fa';\r\n\r\nexport default class Header extends Component {\r\n  logout = () => {\r\n    firebaseInit.auth().signOut();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"header-logo\">\r\n          <img src=\"/images/logo.png\" alt=\"Chootu\" />\r\n        </div>\r\n        <div className=\"header-actions\">\r\n          <FaPowerOff onClick={() => this.logout()} />\r\n          <div className=\"add-task\" onClick={this.props.setInputState}>\r\n            {!this.props.getInputState() && <span> ADD TASK </span>}\r\n            {this.props.getInputState() && <span> CANCEL </span>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './dashboard.css';\r\nimport Content from '../content/content';\r\nimport Header from '../header/header';\r\nimport firebaseInit from '../auth/firebaseInit';\r\n\r\nexport default class Dashboard extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isInputOpen: false,\r\n      isDataAvailable: false,\r\n      userDetails: {},\r\n      todo: [],\r\n      inProgress: [],\r\n      done: []\r\n    };\r\n  }\r\n\r\n  checkIfInitialState = () => {\r\n    return (\r\n      this.state.todo.length === 0 &&\r\n      this.state.inProgress.length === 0 &&\r\n      this.state.done.length === 0\r\n    );\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    firebaseInit.auth().onAuthStateChanged(user => {\r\n      this.setState({\r\n        userDetails: {\r\n          displayName: user.displayName,\r\n          email: user.email,\r\n          uid: user.uid\r\n        }\r\n      });\r\n      this.getUserData();\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState !== this.state && !this.checkIfInitialState()) {\r\n      this.writeUserData();\r\n    }\r\n  }\r\n\r\n  writeUserData = () => {\r\n    const uid = this.state.userDetails.uid;\r\n    firebaseInit\r\n      .database()\r\n      .ref('/' + uid)\r\n      .set(this.state);\r\n    console.log('DATA SAVED');\r\n  };\r\n\r\n  getUserData = () => {\r\n    const uid = this.state.userDetails.uid;\r\n    let ref = firebaseInit.database().ref('/' + uid);\r\n    ref.on('value', snapshot => {\r\n      if (snapshot.val()) {\r\n        const state = snapshot.val();\r\n        this.setState(state);\r\n      } else {\r\n        this.setState({\r\n          isDataAvailable: true\r\n        });\r\n      }\r\n    });\r\n    console.log('DATA RETRIEVED', this.state);\r\n  };\r\n\r\n  setInputState = () => {\r\n    if (this.state.isInputOpen) {\r\n      this.setState({\r\n        isInputOpen: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isInputOpen: true\r\n      });\r\n    }\r\n  };\r\n\r\n  getInputState = () => {\r\n    return this.state.isInputOpen;\r\n  };\r\n\r\n  getToDOItems = () => {\r\n    return this.state.todo;\r\n  };\r\n\r\n  addToDoItem = item => {\r\n    console.log('New item', item);\r\n    this.setState({\r\n      [item.type]: this.state.todo.concat(item)\r\n    });\r\n  };\r\n\r\n  getInProgressItems = () => {\r\n    return this.state.inProgress;\r\n  };\r\n\r\n  getDoneItems = () => {\r\n    return this.state.done;\r\n  };\r\n\r\n  checkIsDataAvailable = () => {\r\n    return this.state.isDataAvailable;\r\n  };\r\n\r\n  updateBackgroundColor = (heading, type, bgcolor) => {\r\n    const updatedArray = this.state[type].map(item => {\r\n      if (item.heading === heading) {\r\n        item.bgcolor = bgcolor;\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      [type]: updatedArray\r\n    });\r\n  };\r\n\r\n  changeItemCategoryAfterItemDragged = (itemData, newtype) => {\r\n    if (newtype !== itemData.type) {\r\n      this.removeCurrentItem(\r\n        itemData.heading,\r\n        itemData.description,\r\n        itemData.type\r\n      );\r\n    }\r\n    itemData.type = newtype;\r\n    this.setState({\r\n      [newtype]: this.state[newtype].concat(itemData)\r\n    });\r\n  };\r\n\r\n  removeCurrentItem = (heading, description, type) => {\r\n    const dataItems = this.state[type];\r\n    this.setState({\r\n      [type]: dataItems.filter(function(item) {\r\n        return item.heading !== heading || item.description !== description;\r\n      })\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Header\r\n          setInputState={this.setInputState}\r\n          getInputState={this.getInputState}\r\n        />\r\n        <Content\r\n          getInputState={this.getInputState}\r\n          setInputState={this.setInputState}\r\n          getToDOItems={this.getToDOItems}\r\n          addToDoItem={this.addToDoItem}\r\n          getInProgressItems={this.getInProgressItems}\r\n          getDoneItems={this.getDoneItems}\r\n          removeCurrentItem={this.removeCurrentItem}\r\n          checkIsDataAvailable={this.checkIsDataAvailable}\r\n          changeItemCategoryAfterItemDragged={\r\n            this.changeItemCategoryAfterItemDragged\r\n          }\r\n          updateBackgroundColor={this.updateBackgroundColor}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport LoginPage from './components/loginPage/loginPage';\nimport './App.css';\nimport firebase from 'firebase';\nimport firebaseInit from './components/auth/firebaseInit';\nimport Dashboard from './components/dashboard/dashboard';\nimport ReactLoading from 'react-loading';\n\nclass App extends Component {\n  state = {\n    user: {}\n  };\n  uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.GithubAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccessWithAuthResult: () => false\n    },\n    isPageLoaded: false\n  };\n\n  componentWillMount = () => {\n    firebaseInit.auth().onAuthStateChanged(user => {\n      this.setState({\n        user: !!user,\n        isPageLoaded: true\n      });\n    });\n  };\n\n  validateUserAndServePage = () => {\n    if (this.state.isPageLoaded) {\n      return <Dashboard />;\n    } else {\n      return (\n        <div className=\"page-loading-indicator\">\n          <ReactLoading\n            type={'spin'}\n            color={'#3498db'}\n            height={'50%'}\n            width={'50%'}\n          />\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.user ? (\n          this.validateUserAndServePage()\n        ) : (\n          <LoginPage uiConfig={this.uiConfig} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}